{"version":3,"sources":["app/home/scripts/services/med.segment.transformer.srv.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,yDAAyD,CAAC,uCAAuC,UAAU,SAAS;EAApI;;EAGE,IAAI,qBACe;EAAnB,OAAO;IACL,SAAS,CAAC,UAAU,8BAA8B;MAChD,sBAAsB,6BAA6B;;IAErD,SAAS,YAAY;MAJJ,4BAAyB,CAAA,YAAA;;;;;;QAGjC,SAHQ,0BAIjB,WACD;UAMO,aAAa,eAAe,MAXjB;;;UAOjB,KAAK,4BAA4B,UAAU,IAAI;UAC/C,KAAK,6BAA6B,UAAU,IAAI;;;QAU5C,aAAa,YAlBA,2BAAyB,CAAA;UAmBpC,KAAK;UACL,OATQ,SAAA,iBAAC,UAAS;YAUhB,IAAI,QAAQ;;YATpB,SAAS,IAAI,UAAA,IAAE;cAYL,OAZS,MAAK,iBAAiB;;;WAelC;UACD,KAAK;UACL,OAdQ,SAAA,iBAAC,SAAQ;YACvB,UAAU,KAAK,gBAAgB;YAC/B,IAAG,QAAQ,YAAY,MAAM;cAC3B,QAAQ,WAAW;;YAErB,IAAI,QAAQ,WAAW,QAAQ,QAAQ,WAAW,WAAU;cAC1D,QAAQ,SAAS,KAAK,gBAAgB,QAAQ;;YAEhD,IAAG,QAAQ,kBAAgB,QAAQ,QAAQ,kBAAgB,WAAU;cACnE,KAAK,0BAA0B,iBAAiB,QAAQ;;YAE1D,IAAG,QAAQ,aAAa,QAAQ,QAAQ,aAAa,WAAW;cAC9D,KAAK,2BAA2B,iBAAiB,QAAQ;;YAE3D,OAAO;;WAgBA;UACD,KAAK;UACL,OAfO,SAAA,gBAAC,SAAQ;YACtB,QAAQ,OAAO,KAAK,UAAU,QAAQ;YACtC,QAAQ,MAAM,KAAK,UAAU,QAAQ;YACrC,QAAQ,QAAQ,KAAK,UAAU,QAAQ;YACvC,OAAO;;WAiBA;UACD,KAAK;UACL,OAhBQ,SAAA,iBAAC,UAAS;YAiBhB,IAAI,SAAS;;YAhBrB,SAAS,IAAI,UAAA,IAAE;cAmBL,OAnBS,OAAK,gBAAgB;;;WAsBjC;UACD,KAAK;UACL,OArBO,SAAA,gBAAC,SAAQ;;YAEtB,UAAU,KAAK,gBAAgB;YAC/B,IAAI,QAAQ,WAAW,QAAQ,QAAQ,WAAW,WAAU;cAC1D,QAAQ,SAAS,KAAK,gBAAgB,QAAQ;;YAEhD,IAAG,QAAQ,kBAAkB,QAAQ,QAAQ,kBAAkB,WAAU;cACvE,KAAK,0BAA0B,iBAAiB,QAAQ;;YAE1D,IAAG,QAAQ,aAAa,QAAQ,QAAQ,aAAa,WAAW;cAC9D,KAAK,2BAA2B,iBAAiB,QAAQ;;YAE3D,OAAO;;WAuBA;UACD,KAAK;UACL,OAtBO,SAAA,gBAAC,SAAQ;YACtB,QAAQ,aAAa,KAAK,UAAU,QAAQ;YAC5C,OAAO,QAAQ;YACf,QAAQ,SAAS,KAAK,UAAU,QAAQ;YACxC,OAAO,QAAQ;YACf,QAAQ,cAAc,KAAK,UAAU,QAAQ;YAC7C,OAAO,QAAQ;YACf,OAAO;;;;WA0BA;UACD,KAAK;UACL,OAxBO,SAAA,gBAAC,IAAI,QAAO;YACzB,IAAI,UAAU,GAAG,MAAM,KAAK,IAAI,UAAA,IAAE;cAyBxB,OAzB4B,SAAS;;YAC/C,IAAI,SAAS;YACb,UAAU,QAAQ;YAClB,UAAU,QAAQ,KAAK;YACvB,UAAU,QAAQ,KAAK,KAAK;YAC5B,UAAU,QAAQ,KAAK,OAAO;YAC9B,OAAO;;WA4BA;UACD,KAAK;UACL,OA3BQ,SAAA,iBAAC,QAAQ,WAAU;YACjC,IAAI,UAAU,CAAC,GAAE,GAAE,GAAE;YACrB,IAAI,YAAY;;YAEhB,IAAI,QAAQ,KAAK,gBAAgB,WAAW,MAAM;YAClD,QAAQ,KAAK;YACb,aAAa,KAAK,eAAe,OAAO,MAAM;;YAE9C,IAAI,UAAU,KAAK,gBAAgB,WAAW,IAAI;YAClD,QAAQ,KAAK;YACb,aAAa,KAAK,eAAe,SAAS,IAAI;;YAE9C,IAAI,UAAU,KAAK,gBAAgB,WAAW,GAAG;YACjD,QAAQ,KAAK;YACb,aAAa,KAAK,eAAe,SAAS,GAAG;;YAE7C,QAAQ,KAAK;;YAEb,OAAO,KAAK,gBAAgB,QAAQ,KAAK;;WA6BlC;UACD,KAAK;UACL,OA5BO,SAAA,gBAAC,QAAQ,OAAO,WAAW;YACxC,IAAI,SAAS,KAAK,MAAM,UAAU,QAAQ;YAC1C,OAAO,UAAU,IAAI,SAAS;;WA8BvB;UACD,KAAK;UACL,OA7BM,SAAA,eAAC,QAAQ,OAAO,WAAW;YACvC,OAAO,UAAU,QAAQ;;WA+BlB;UACD,KAAK;UACL,OA9BC,SAAA,UAAC,UAAS;YACjB,IAAG,KAAK,SAAS,WAAU;cACzB,OAAO,KAAK,iBAAiB;;;WAiCxB;UACD,KAAK;UACL,OA/BC,SAAA,UAAC,gBAAgB;YACxB,IAAG,KAAK,SAAS,iBAAgB;cAC/B,OAAO,KAAK,iBAAiB;;;WAkCxB;UACD,KAAK;UACL,OAhCQ,SAAA,iBAAC,UAAU;YACzB,IAAI,WAAW,SAAS,MAAM;YAC9B,OAAO;cACL,MAAM,SAAS;cACf,QAAQ,SAAS;cACjB,QAAQ,SAAS;cACjB,OAAO,SAAS;;;WAmCX;UACD,KAAK;UACL,OAjCQ,SAAA,iBAAC,QAAQ;YACvB,IAAI,WAAW,OAAO,OAAO,MAAM,OAAO,SAAS,MAAM,OAAO,SAAS,MAAM,OAAO;YACtF,OAAO,KAAK,gBAAgB;;WAmCrB;UACD,KAAK;UACL,OAlCO,SAAA,gBAAC,UAAS;YAmCf,IAAI,SAAS;;YAlCrB,OAAO,SACJ,MAAM,KACN,IAAI,UAAA,IAAE;cAmCC,OAnCG,OAAK,YAAY;eAC3B,KAAK;;WAqCD;UACD,KAAK;UACL,OApCG,SAAA,YAAC,UAAU;YACpB,IAAG,SAAS,SAAS,GAAE;cACrB,OAAO,MAAM;;YAEf,OAAO;;WAsCA;UACD,KAAK;UACL,OArCA,SAAA,SAAC,SAAQ;YACf,OAAO,OAAO,YAAY,eAAe,YAAY;;WAuC9C;UACD,KAAK;UACL,OAtCC,SAAA,UAAC,UAAS;YAuCT,IAAI,SAAS;;YAtCrB,OAAO,SAAS,OAAO,UAAA,IAAE;cAyCf,OAzCmB,CAAC,OAAK,SAAS;eAAK,WAAW;;;QA6CxD,OAxMa;;;MA2Mf,QAAQ,WA3MO;;;GA8MlB","file":"app/home/scripts/services/med.segment.transformer.srv.js","sourcesContent":["'use strict';\n\nimport TimeBaseTransformer from './med.time.base.transformer.srv.js';\n\nexport default class SegmentTransformerService {//extends TimeBaseTransformer {\n\n  /*@ngInject*/\n  constructor(\n    $injector\n  ){\n    //super();\n    this.squeezeTransformerService = $injector.get('squeezeTransformerService');\n    this.hotStartTransformerService = $injector.get('hotStartTransformerService');\n  }\n\n  segmentsToString(segments){\n    segments.map(it => this._segmentToString(it));\n  }\n\n  _segmentToString(segment){\n    segment = this.elementToString(segment);\n    if(segment.ingestID == null) {\n      segment.ingestID = undefined;\n    }\n    if (segment.credit !== null && segment.credit !== undefined){\n      segment.credit = this.elementToString(segment.credit);\n    }\n    if(segment.squeezeCredit!==null && segment.squeezeCredit!==undefined){\n      this.squeezeTransformerService.squeezesToString(segment.squeezeCredit);\n    }\n    if(segment.hotStart !== null && segment.hotStart !== undefined) {\n      this.hotStartTransformerService.hotStartToString(segment.hotStart);\n    }\n    return segment;\n  }\n\n  elementToString(element){\n    element.tCIn = this._toString(element.timeCodeIn);\n    element.lth = this._toString(element.length);\n    element.tCOut = this._toString(element.timeCodeOut);\n    return element;\n  }\n\n  segmentsToObject(segments){\n    segments.map(it => this.segmentToObject(it));\n  }\n\n  segmentToObject(segment){\n\n    segment = this.elementToObject(segment);\n    if (segment.credit !== null && segment.credit !== undefined){\n      segment.credit = this.elementToObject(segment.credit);\n    }\n    if(segment.squeezeCredit !== null && segment.squeezeCredit !== undefined){\n      this.squeezeTransformerService.squeezesToObject(segment.squeezeCredit);\n    }\n    if(segment.hotStart !== null && segment.hotStart !== undefined) {\n      this.hotStartTransformerService.hotStartToObject(segment.hotStart);\n    }\n    return segment;\n  }\n\n  elementToObject(element){\n    element.timeCodeIn = this._toObject(element.tCIn);\n    delete element.tCIn;\n    element.length = this._toObject(element.lth);\n    delete element.lth;\n    element.timeCodeOut = this._toObject(element.tCOut);\n    delete element.tCOut;\n    return element;\n  }\n\n  //TODO: angular no injecta el time base transformer\n  timeCodeToFrame(tc, frames){\n    let tcArray = tc.split(\":\").map(it => parseInt(it));\n    let result = 0;\n    result += tcArray[3];\n    result += tcArray[2] * frames;\n    result += tcArray[1] * 60 * frames;\n    result += tcArray[0] * 3600 * frames;\n    return result;\n  }\n\n  framesToTimecode(frames, maxFrames){\n    let tcArray = [0,0,0,0];\n    let remFrames = frames;\n\n    let hours = this._framesToObject(remFrames, 3600, maxFrames);\n    tcArray[0] = hours;\n    remFrames -= this._objectToFrame(hours, 3600, maxFrames);\n\n    let minutes = this._framesToObject(remFrames, 60, maxFrames);\n    tcArray[1] = minutes;\n    remFrames -= this._objectToFrame(minutes, 60, maxFrames);\n\n    let seconds = this._framesToObject(remFrames, 1, maxFrames);\n    tcArray[2] = seconds;\n    remFrames -= this._objectToFrame(seconds, 1, maxFrames);\n\n    tcArray[3] = remFrames;\n\n    return this._fillWithZeroes(tcArray.join(\":\"));\n  }\n\n  _framesToObject(frames, scale, maxFrames) {\n    let object = Math.floor(frames / (scale * maxFrames));\n    return object >= 1 ? object : 0;\n  }\n\n  _objectToFrame(object, scale, maxFrames) {\n    return object * (scale * maxFrames);\n  }\n\n  _toObject(timeCode){\n    if(this._isValid(timeCode)){\n      return this._elementToObject(timeCode);\n    }\n  }\n\n  _toString(timeCodeString) {\n    if(this._isValid(timeCodeString)){\n      return this._elementToString(timeCodeString);\n    }\n  }\n\n  _elementToObject(timeCode) {\n    let splitted = timeCode.split(\":\");\n    return {\n      hour: splitted[0],\n      minute: splitted[1],\n      second: splitted[2],\n      frame: splitted[3]\n    };\n  }\n\n  _elementToString(object) {\n    let stringTC = object.hour + \":\" + object.minute + \":\" + object.second + \":\" + object.frame;\n    return this._fillWithZeroes(stringTC);\n  }\n\n  _fillWithZeroes(stringTC){\n    return stringTC\n      .split(\":\")\n      .map(it => this._fillZeroes(it))\n      .join(':');\n  }\n\n  _fillZeroes(stringTC) {\n    if(stringTC.length < 2){\n      return '0' + stringTC;\n    }\n    return stringTC;\n  }\n\n  _isValid(element){\n    return typeof element !== 'undefined' && element !== null;\n  }\n\n  _areValid(elements){\n    return elements.filter(it => !this._isValid(it)).length === 0;\n  }\n}\n"],"sourceRoot":"/source/"}