{"version":3,"sources":["app/home/scripts/services/med.squeeze.srv.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,6CAA6C,CAAC,yBAAyB,UAAU,SAAS;EAA1G;;EAGE,IAAI,gBACe;EAAnB,OAAO;IACL,SAAS,CAAC,UAAU,kBAAkB;MACpC,iBAAiB,iBAAiB;;IAEpC,SAAS,YAAY;;uEAJJ,iBAAc,CAAA,UAAA,iBAAA;QAM3B,aAAa,SANA,gBAAc;;;;QAGtB,SAHQ,eAGP,4BAA4B;UAQhC,aAAa,eAAe,MAXjB;;UAIjB,aAAA,IAAA,OAAA,eAJiB,eAAc,YAAA,eAAA,MAAA,KAAA,MAIzB;;;QAYF,aAAa,YAhBA,gBAAc,CAAA;UAiBzB,KAAK;UACL,OAXQ,SAAA,iBAAC,UAAU,QAAO;YAYxB,IAAI,QAAQ;;YAXpB,OAAO,OAAO,SAAS,KAAK,UAAA,IAAE;cAcpB,OAdwB,CAAC,MAAK,eAAe,IAAI,WAAW,CAAC,MAAK,eAAe;mBAAS;;WAiB7F;UACD,KAAK;UACL,OAhBM,SAAA,eAAC,SAAS,QAAO;YAC7B,IAAG,CAAC,QAAQ,QAAQ,CAAC,QAAQ,OAAO;cAClC,OAAO;;YAET,OAAO,KAAK,iBAAiB,QAAQ,MAAM,OAAO,SAC9C,KAAK,iBAAiB,OAAO,OAAO,QAAQ;;WAiBzC;UACD,KAAK;UACL,OAhBM,SAAA,eAAC,SAAQ;YACrB,IAAG,KAAK,cAAc,QAAQ,SAAS,KAAK,cAAc,QAAQ,QAChE,OAAQ,QAAQ;YAClB,OAAO;;WAiBA;UACD,KAAK;UACL,OAhBG,SAAA,YAAC,SAAS,QAAO;YAC1B,IAAG,KAAK,iBAAiB,UAAU;cACjC,QAAQ,QAAQ,KAAK,MAAM,QAAQ,MAAM,QAAQ,OAAO;;;WAmBnD;UACD,KAAK;UACL,OAjBQ,SAAA,iBAAC,SAAQ;YAkBf,IAAI,SAAS;;YAjBrB,OAAO,OAAO,CAAC,QAAQ,MAAM,QAAQ,OAAO,KAAK,UAAA,IAAE;cAoBzC,OApB6C,CAAC,OAAK,cAAc;mBAAS;;WAuB7E;UACD,KAAK;UACL,OAtBM,SAAA,eAAC,UAAU,QAAQ;YAuBvB,IAAI,SAAS;;YAtBrB,OAAO,OAAO,SAAS,KAAK,UAAA,SAAO;cAyBzB,OAzB6B,CAAC,OAAK,gBAAgB,SAAS;mBAAa;;WA4B5E;UACD,KAAK;UACL,OA3BO,SAAA,gBAAC,SAAS,QAAO;YA4BtB,IAAI,SAAS;;YA3BrB,OAAO,OAAO,CAAC,QAAQ,MAAM,QAAQ,OAAO,KAAK,UAAA,IAAE;cA8BzC,OA9B6C,CAAC,OAAK,cAAc,IAAI;mBAAa;;WAiCrF;UACD,KAAK;UACL,OAhCyB,SAAA,kCAAC,UAAU,UAAS;YACnD,IAAI,OAAO;YACX,OAAO,SAAS,MAAM,UAAS,SAAQ;;cAErC,IAAG,QAAQ,cAAc,UAAU,GAAE;gBACnC,OAAO;;cAET,OAAO,KAAK,eAAe,QAAQ,eAAe;;;;QAoChD,OAtFa;SAAuB;;MAyFtC,QAAQ,WAzFO;;;GA4FlB","file":"app/home/scripts/services/med.squeeze.srv.js","sourcesContent":["'use strict';\n\nimport SegmentService from './med.segment.srv.js';\n\nexport default class SqueezeService extends SegmentService {\n\n  /*@ngInject*/\n  constructor(timeBaseTransformerService) {\n    super(timeBaseTransformerService)\n  }\n\n  areSqueezesValid(squeezes, credit){\n    return typeof squeezes.find(sq => !this.isSqueezeValid(sq, credit) || !this.isCodeSelected(sq)) === 'undefined';\n  }\n\n  isSqueezeValid(squeeze, credit){\n    if(!squeeze.TFIn || !squeeze.TFOut) {\n      return true;\n    }\n    return this._isBiggerOrEqual(squeeze.TFIn, credit.tCIn) &&\n        this._isBiggerOrEqual(credit.tCOut, squeeze.TFOut);\n  }\n\n  isCodeSelected(squeeze){\n    if(this.isFormatValid(squeeze.TFIn) && this.isFormatValid(squeeze.TFOut))\n      return  squeeze.code;\n    return true;\n  }\n\n  updateTCOut(squeeze, frames){\n    if(this._areFormatsValid(squeeze)) {\n      squeeze.TFOut = this._plus(squeeze.TFIn, squeeze.TFLen, frames);\n    }\n  }\n\n  _areFormatsValid(squeeze){\n    return typeof [squeeze.TFIn, squeeze.TFLen].find(it => !this.isFormatValid(it)) === 'undefined';\n  }\n\n  areFramesValid(squeezes, frames) {\n    return typeof squeezes.find(squeeze => !this._areFramesValid(squeeze, frames)) === 'undefined';\n  }\n\n  _areFramesValid(squeeze, frames){\n    return typeof [squeeze.TFIn, squeeze.TFLen].find(it => !this.isFramesValid(it, frames)) === 'undefined';\n  }\n\n  areSqueezeFramesFromSegmentsValid(segments, maxFrame){\n    let self = this;\n    return segments.every(function(segment){\n\n      if(segment.squeezeCredit.length == 0){\n        return true;\n      }\n      return self.areFramesValid(segment.squeezeCredit, maxFrame);\n    })\n\n  }\n}\n"],"sourceRoot":"/source/"}