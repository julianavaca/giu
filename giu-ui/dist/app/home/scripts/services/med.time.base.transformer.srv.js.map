{"version":3,"sources":["app/home/scripts/services/med.time.base.transformer.srv.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,2DAA2D,IAAI,UAAU,SAAS;EAAlG;;EAGE,IADmB;EAEnB,OAAO;IACL,SAAS;IACT,SAAS,YAAY;MAJJ,sBAAmB,CAAA,YAAA;;;;QAG3B,SAHQ,sBAGN;UAOL,aAAa,eAAe,MAVjB;;;QAab,aAAa,YAbA,qBAAmB,CAAA;UAc9B,KAAK;UACL,OAVO,SAAA,gBAAC,IAAI,QAAO;YACzB,IAAI,UAAU,GAAG,MAAM,KAAK,IAAI,UAAA,IAAE;cAWxB,OAX4B,SAAS;;YAC/C,IAAI,SAAS;YACb,UAAU,QAAQ;YAClB,UAAU,QAAQ,KAAK;YACvB,UAAU,QAAQ,KAAK,KAAK;YAC5B,UAAU,QAAQ,KAAK,OAAO;YAC9B,OAAO;;WAcA;UACD,KAAK;UACL,OAbQ,SAAA,iBAAC,QAAQ,WAAU;YACjC,IAAI,UAAU,CAAC,GAAE,GAAE,GAAE;YACrB,IAAI,YAAY;;YAEhB,IAAI,QAAQ,KAAK,gBAAgB,WAAW,MAAM;YAClD,QAAQ,KAAK;YACb,aAAa,KAAK,eAAe,OAAO,MAAM;;YAE9C,IAAI,UAAU,KAAK,gBAAgB,WAAW,IAAI;YAClD,QAAQ,KAAK;YACb,aAAa,KAAK,eAAe,SAAS,IAAI;;YAE9C,IAAI,UAAU,KAAK,gBAAgB,WAAW,GAAG;YACjD,QAAQ,KAAK;YACb,aAAa,KAAK,eAAe,SAAS,GAAG;;YAE7C,QAAQ,KAAK;;YAEb,OAAO,KAAK,gBAAgB,QAAQ,KAAK;;WAelC;UACD,KAAK;UACL,OAdO,SAAA,gBAAC,QAAQ,OAAO,WAAW;YACxC,IAAI,SAAS,KAAK,MAAM,UAAU,QAAQ;YAC1C,OAAO,UAAU,IAAI,SAAS;;WAgBvB;UACD,KAAK;UACL,OAfM,SAAA,eAAC,QAAQ,OAAO,WAAW;YACvC,OAAO,UAAU,QAAQ;;WAiBlB;UACD,KAAK;UACL,OAhBC,SAAA,UAAC,UAAS;YACjB,IAAG,KAAK,SAAS,WAAU;cACzB,OAAO,KAAK,iBAAiB;;;WAmBxB;UACD,KAAK;UACL,OAjBC,SAAA,UAAC,gBAAgB;YACxB,IAAG,KAAK,SAAS,iBAAgB;cAC/B,OAAO,KAAK,iBAAiB;;;WAoBxB;UACD,KAAK;UACL,OAlBQ,SAAA,iBAAC,UAAU;YACzB,IAAI,WAAW,SAAS,MAAM;YAC9B,OAAO;cACL,MAAM,SAAS;cACf,QAAQ,SAAS;cACjB,QAAQ,SAAS;cACjB,OAAO,SAAS;;;WAqBX;UACD,KAAK;UACL,OAnBQ,SAAA,iBAAC,QAAQ;YACvB,IAAI,WAAW,OAAO,OAAO,MAAM,OAAO,SAAS,MAAM,OAAO,SAAS,MAAM,OAAO;YACtF,OAAO,KAAK,gBAAgB;;WAqBrB;UACD,KAAK;UACL,OApBO,SAAA,gBAAC,UAAS;YAqBf,IAAI,QAAQ;;YApBpB,OAAO,SACJ,MAAM,KACN,IAAI,UAAA,IAAE;cAqBC,OArBG,MAAK,YAAY;eAC3B,KAAK;;WAuBD;UACD,KAAK;UACL,OAtBG,SAAA,YAAC,UAAU;YACpB,IAAG,SAAS,SAAS,GAAE;cACrB,OAAO,MAAM;;YAEf,OAAO;;WAwBA;UACD,KAAK;UACL,OAvBA,SAAA,SAAC,SAAQ;YACf,OAAO,OAAO,YAAY,eAAe,YAAY;;WAyB9C;UACD,KAAK;UACL,OAxBC,SAAA,UAAC,UAAS;YAyBT,IAAI,SAAS;;YAxBrB,OAAO,SAAS,OAAO,UAAA,IAAE;cA2Bf,OA3BmB,CAAC,OAAK,SAAS;eAAK,WAAW;;;QA+BxD,OA1Ha;;;MA6Hf,QAAQ,WA7HO;;;GAgIlB","file":"app/home/scripts/services/med.time.base.transformer.srv.js","sourcesContent":["'use strict';\n\nexport default class TimeBaseTransformer {\n\n  /*@ngInject*/\n  constructor(){}\n\n  timeCodeToFrame(tc, frames){\n    let tcArray = tc.split(\":\").map(it => parseInt(it));\n    let result = 0;\n    result += tcArray[3];\n    result += tcArray[2] * frames;\n    result += tcArray[1] * 60 * frames;\n    result += tcArray[0] * 3600 * frames;\n    return result;\n  }\n\n  framesToTimecode(frames, maxFrames){\n    let tcArray = [0,0,0,0];\n    let remFrames = frames;\n\n    let hours = this._framesToObject(remFrames, 3600, maxFrames);\n    tcArray[0] = hours;\n    remFrames -= this._objectToFrame(hours, 3600, maxFrames);\n\n    let minutes = this._framesToObject(remFrames, 60, maxFrames);\n    tcArray[1] = minutes;\n    remFrames -= this._objectToFrame(minutes, 60, maxFrames);\n\n    let seconds = this._framesToObject(remFrames, 1, maxFrames);\n    tcArray[2] = seconds;\n    remFrames -= this._objectToFrame(seconds, 1, maxFrames);\n\n    tcArray[3] = remFrames;\n\n    return this._fillWithZeroes(tcArray.join(\":\"));\n  }\n\n  _framesToObject(frames, scale, maxFrames) {\n    let object = Math.floor(frames / (scale * maxFrames));\n    return object >= 1 ? object : 0;\n  }\n\n  _objectToFrame(object, scale, maxFrames) {\n    return object * (scale * maxFrames);\n  }\n\n  _toObject(timeCode){\n    if(this._isValid(timeCode)){\n      return this._elementToObject(timeCode);\n    }\n  }\n\n  _toString(timeCodeString) {\n    if(this._isValid(timeCodeString)){\n      return this._elementToString(timeCodeString);\n    }\n  }\n\n  _elementToObject(timeCode) {\n    let splitted = timeCode.split(\":\");\n    return {\n      hour: splitted[0],\n      minute: splitted[1],\n      second: splitted[2],\n      frame: splitted[3]\n    };\n  }\n\n  _elementToString(object) {\n    let stringTC = object.hour + \":\" + object.minute + \":\" + object.second + \":\" + object.frame;\n    return this._fillWithZeroes(stringTC);\n  }\n\n  _fillWithZeroes(stringTC){\n    return stringTC\n      .split(\":\")\n      .map(it => this._fillZeroes(it))\n      .join(':');\n  }\n\n  _fillZeroes(stringTC) {\n    if(stringTC.length < 2){\n      return '0' + stringTC;\n    }\n    return stringTC;\n  }\n\n  _isValid(element){\n    return typeof element !== 'undefined' && element !== null;\n  }\n\n  _areValid(elements){\n    return elements.filter(it => !this._isValid(it)).length === 0;\n  }\n\n}\n"],"sourceRoot":"/source/"}