{"version":3,"sources":["app/home/scripts/controllers/med.search.results.detail.resources.subtitles.ctrl.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,mFAAmF,CAAC,gDAAgD,UAAU,SAAS;EAAvK;;EAGE,IAAI,UACe;EAAnB,OAAO;IACL,SAAS,CAAC,UAAU,uCAAuC;MACzD,WAAW,sCAAsC;;IAEnD,SAAS,YAAY;MAJJ,0BAAuB,CAAA,YAAA;;;;;QAG/B,SAHQ,wBAGP,QAAQ,WAAW,kBAAkB;UAOzC,aAAa,eAAe,MAVjB;;UAKjB,KAAK,QAAQ;UACb,KAAK,sBAAsB,EAAC,SAAS;UACrC,KAAK,oBAAoB,IAAI,SAAS;YACpC,UAAU,WAAW,UAAU,2BAA2B,QAAQ,OAAO,QAAQ,YAAY;cAC3F,SAAS,MAAM,SAAS,MAAM,kBAAkB;eAC/C,YAAY;;;UAGjB,KAAK,mBAAmB;UACxB,KAAK;;;QAUD,aAAa,YAxBA,yBAAuB,CAAA;UAyBlC,KAAK;UACL,OATH,SAAA,QAAE;YAUG,IAAI,QAAQ;;YATpB,IAAG,CAAC,KAAK,MAAM,OAAO,IAAI;cACxB;;YAEF,KAAK,UAAU,CACb;cACE,OAAM;cACN,SAAS,KAAK,iBAAiB,UAAU;cACzC,MAAM;cACN,QAAQ,SAAA,SAAM;gBACZ,MAAK;;cAEP,MAAK,KAAK;;YAGd,KAAK,kBACF,MACA,SACA,KAAK,UAAA,UAAY;cAChB,MAAK,oBAAoB,QAAQ,CAAC,SAAS,oBAAoB,SAAS;cACxE,MAAK,QAAQ;gBACX,SAAS,YAAY,SAAS;gBAC9B,UAAU;gBACV,QAAQ,EAAC,OAAO,SAAS;;;;WAUxB;UACD,KAAK;UACL,OAPA,SAAA,WAAE;YACR,IAAG,CAAC,KAAK,kBAAkB,MAAM;cAC/B,OAAO;;YAET,IAAG,CAAC,KAAK,kBAAkB,KAAK,OAAO;cACrC,OAAO;;YAET,OAAO,KAAK;;WASL;UACD,KAAK;UACL,OARM,SAAA,iBAAE;YACd,KAAK,MAAM,GAAG,2CAA2C,EAAC,IAAI,KAAK,MAAM,OAAO,IAAI,cAAc;;WAU3F;UACD,KAAK;UACL,OATE,SAAA,WAAC,UAAS;YAClB,OAAO,SAAS,QAAQ,SAAS,KAAK;;;QAYlC,OAxEa;;;MA2Ef,QAAQ,WA3EO;;;GA8ElB","file":"app/home/scripts/controllers/med.search.results.detail.resources.subtitles.ctrl.js","sourcesContent":["'use strict';\n\nimport Pageable from 'module-crud-ui/app/scripts/crud.pageable.js';\n\nexport default class SearchResultsDetailCtrl {\n\n  /*@ngInject*/\n  constructor($state, $injector, translateService) {\n\n    this.state = $state;\n    this.isNotVirtualSegment = {'value': false};\n    this.subtitlesPageable = new Pageable({\n      injector: $injector, endpoint: 'mediaMaterialsSubtitles', params: $state.params, selectable: {\n        itemKey: 'id', enabled: true, allowMultiSelect: false\n      }, executeGet: false\n    });\n\n    this.translateService = translateService;\n    this._init();\n  }\n\n  _init(){\n    if(!this.state.params.id) {\n      return;\n    }\n    this.actions = [\n      {\n        roles:'MMMU',\n        tooltip: this.translateService.translate('tooltip.edit'),\n        icon: 'edit',\n        action: () => {\n          this.onSubtitleEdit();\n        },\n        show:this.isNotVirtualSegment\n      }\n    ];\n    this.subtitlesPageable\n      .get()\n      .$promise\n      .then(response => {\n        this.isNotVirtualSegment.value = !response.isVirtualSegment && response.isMediaMaterialEnabled;\n        this.audit = {\n          enabled: response && response.audit,\n          isRemote: false,\n          entity: {audit: response.audit}\n        };\n      });\n  }\n\n  getAudit(){\n    if(!this.subtitlesPageable.page) {\n      return false;\n    }\n    if(!this.subtitlesPageable.page.audit) {\n      return false;\n    }\n    return this.audit;\n  }\n\n  onSubtitleEdit(){\n    this.state.go('searchResults.detail.mediaSubtitlesEdit', {id: this.state.params.id, resourceType: 'subtitle'});\n  }\n\n  isEditable(pageable){\n    return pageable.page && pageable.page.isEditable;\n  }\n}\n"],"sourceRoot":"/source/"}