{"version":3,"sources":["app/home/scripts/controllers/med.new.media.view.virtual.segment.ctrl.js"],"names":[],"mappings":"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","file":"app/home/scripts/controllers/med.new.media.view.virtual.segment.ctrl.js","sourcesContent":["'use strict';\nimport Saveable from 'module-crud-ui/app/scripts/crud.saveable.js';\nimport SegmentsBase from './med.segments.base.ctrl.js';\n\nexport default class ViewVirtualSegment extends Saveable {\n\n  /*@ngInject*/\n  constructor($injector, $state, $window, segmentTransformerService, translateService,\n              segmentService, squeezeService, $mdDialog){\n\n    super(\n      {\n        injector:$injector,\n        endpoint:'lfidsegments',\n        backToState:'.',\n        key:'id',\n        successTitle: 'media.edit.alert.success.title',\n        successMessage: 'media.edit.alert.success.message',\n        successCreateMessage: 'media.edit.alert.create.success.message',\n        successEditMessage: 'media.edit.alert.success.message',\n        errorTitle: 'media.edit.alert.error',\n        executeGet: false,\n        params: $state.params,\n        entityDependencies: [\n          {api: 'networkResource', loading: 'isLoading', model: 'networkData'},\n          {api: 'mediaFormatResource', loading: 'isLoading', model: 'formats',params:{'virtualSegmented':false}},\n          {api: 'mediaTypeResource', loading: 'isLoading', model: 'types'}\n        ]\n      }\n    );\n\n    this.translateService = translateService;\n    this.segmentTransformerService = segmentTransformerService;\n    this.state = $state;\n    this.window = $window;\n    this.mediaId = this.state.params.id;\n    this.warning = false;\n    this.mdDialog = $mdDialog;\n\n    this.segmentsBase = new SegmentsBase(\n      segmentService,\n      squeezeService,\n      segmentTransformerService,\n      translateService,\n      $state,\n      $mdDialog);\n\n    this.editFirst = this.state.params.editFirst === \"true\"? true : false;\n    this.getMedia();\n    this.getMediaMaterial();\n    this.getAspectRatios();\n    this._execute();\n  }\n\n  goToParent(){\n    let mediaMaterialIds = this.$state.params.id.split('-');\n\n    let parentParams = {\n      mediaFormat: mediaMaterialIds[0],\n      mediaType: mediaMaterialIds[1],\n      mediaId: mediaMaterialIds[2],\n      materialId:mediaMaterialIds[3],\n      chapterFrom:mediaMaterialIds[4],\n      chapterTo:mediaMaterialIds[4]\n    };\n\n    this.state.go('searchResults', parentParams);\n  }\n\n\n  openCreateVirtualSegment(ev){\n    let self = this;\n    this.mdDialog\n      .show(\n      {\n        controller: ($scope, $mdDialog) => {\n          $scope.vm = self;\n        },\n        templateUrl: 'home/views/med.search.results.detail.segments.new.virtual.segment.html',\n        parent: angular.element(document.body),\n        targetEvent: ev,\n        clickOutsideToClose: false\n      }\n    );\n  }\n\n\n  closeModal() {\n    this.mdDialog.hide();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getAspectRatios(){\n    this.response = this.api['aspectsRatioMedias'].get({'id': this.getMediaIdFromMediaMaterialId()});\n    this.response.isLoading = true;\n    var objectData = this.response;\n\n    this.response.$promise.then((response) => {\n\n      objectData.isLoading = false;\n      objectData.valid = true;\n      this.aspectRatios = response.content;\n\n    }, function(error) {\n      // Si nos devuelve un 404, no queremos que se muestre el recurso, pero tampoco que nos tire error\n      if(error.status == 404){\n        objectData.valid = false;\n        objectData.isLoading = false;\n      }\n    });\n  }\n\n  getMediaMaterial(){\n    this.response = this.api['mediaMaterials'].get({'id': this.$state.params.id});\n    this.response.isLoading = true;\n    var objectData = this.response;\n\n    this.response.$promise.then((response) => {\n\n      objectData.isLoading = false;\n      objectData.valid = true;\n      this.mediaMaterial = response;\n\n    }, function(error) {\n      // Si nos devuelve un 404, no queremos que se muestre el recurso, pero tampoco que nos tire error\n      if(error.status == 404){\n        objectData.valid = false;\n        objectData.isLoading = false;\n      }\n    });\n  }\n\n  getMediaIdFromMediaMaterialId(){\n    let mediaMaterialId = this.state.params.id.split('-');\n    return mediaMaterialId[0].concat('-').concat(mediaMaterialId[1]).concat('-').concat(mediaMaterialId[2]);\n  }\n\n  getMedia(){\n    this.response = this.api['medias'].get({'currentId': this.getMediaIdFromMediaMaterialId()});\n    this.response.isLoading = true;\n    var objectData = this.response;\n\n    this.response.$promise.then((response) => {\n\n      objectData.isLoading = false;\n      objectData.valid = true;\n      this.media = response;\n\n    }, function(error) {\n      // Si nos devuelve un 404, no queremos que se muestre el recurso, pero tampoco que nos tire error\n      if(error.status == 404){\n        objectData.valid = false;\n        objectData.isLoading = false;\n      }\n    });\n  }\n\n  shouldSelectAspectRatioForLFID(){\n    return (!this.mediaMaterial.aspectRatio && this.isAspectRatioRequired())\n      || this.isNewFormatLFID();\n  }\n\n  isInvalidCopy(){\n    return !this.copy || !this.copy.media;\n  }\n\n  getFormat(format){\n    let elem = this.formats.find(it => it.id === format);\n    if(!elem) {\n      return this.formatsLfId.find(it => it.id === format);\n    }\n    return elem;\n  }\n\n  isNewFormatLFID(){\n    if(this.isInvalidCopy()){\n      return false;\n    }\n    let currentFormat = this.getFormat(this.media.format);\n    let newFormat = this.getFormat(this.copy.media.format);\n    return currentFormat.definition !== newFormat.definition;\n  }\n\n  inspectAspectRatio(){\n    if(this.copy && this.copy.aspectRatio && this.copy.aspectRatio.id == 'undefined'){\n      delete this.copy.aspectRatio.id;\n    }\n  }\n\n  clone() {\n    let promise = this.api['mediamateriallfid'].save({'id': this.$state.params.id}, this.copy).$promise;\n    promise.then((response) => {\n      this.alertService.success(\n        {\n          title: this.translate(this.successTitle),\n          message: this.translate(this.successCreateMessage)\n        }\n      );\n      this.$state.go('viewVirtualSegment', {'editFirst':true},{reload:true});\n\n      this.mdDialog.hide();\n    }, (err) => {\n      this.alertService.error({\n        title: this.translate(this.errorTitle),\n        message: err.data.message\n      });\n    });\n  }\n\n  isAspectRatioRequired(){\n    if(!this.copy || !this.copy.media){\n      return false;\n    }\n    return this.types.find(it => it.id == this.copy.media.type && it.mandatoryAspectRatio);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getTitle(){\n    return this.translateService.translate('view.virtual.segment.title') + ' ' + this.mediaId;\n  }\n\n  _execute(){\n    let self = this;\n    this\n      .get()\n      .$promise\n      .then((response) => {\n        this.mediaMaterials = [];\n        this.getFormatsForLFID(response.content);\n        if(this.entity.content.length == 0){\n          this.warning = true;\n        } else {\n          this.entity.content.forEach(mediaMaterial => {\n          let mediaMaterialResult = {};\n          let segmentList = [];\n\n          mediaMaterial.segments.items.forEach(seg => {\n            segmentList.push(Object.assign({},seg));\n          });\n\n          self.segmentTransformerService.segmentsToString(segmentList);\n          self.segmentsBase.changeSegment(segmentList[0]);\n\n          let audit = {\n            enabled: mediaMaterial.segments && mediaMaterial.segments.audit,\n            entity: {audit: mediaMaterial.segments.audit}\n          };\n\n          mediaMaterialResult.segments = segmentList;\n          mediaMaterialResult.audit = audit;\n\n          self.mediaMaterials.push(mediaMaterialResult);\n        });\n        }\n      });\n  }\n\n  getFormatsForLFID(formats){\n    let self = this;\n    this.response = this.api['mediaFormatResource'].get({'virtualSegmented':true});\n    this.response.isLoading = true;\n    var objectData = this.response;\n\n    this.response.$promise.then((response) => {\n\n      objectData.isLoading = false;\n      objectData.valid = true;\n      this.formatsLfId = response.content;\n\n      let originFormat = this.getFormat(self.media.format);\n\n      this.formatsLfId = self.formatsLfId.filter(format => format.definition == originFormat.definition);\n\n    }, function(error) {\n      // Si nos devuelve un 404, no queremos que se muestre el recurso, pero tampoco que nos tire error\n      if(error.status == 404){\n        objectData.valid = false;\n        objectData.isLoading = false;\n      }\n    });\n    return this.response;\n  }\n\n}\n"],"sourceRoot":"/source/"}