{"version":3,"sources":["app/home/scripts/controllers/med.material.detail.ctrl.js"],"names":[],"mappings":"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","file":"app/home/scripts/controllers/med.material.detail.ctrl.js","sourcesContent":["'use strict';\n\nimport Saveable from 'module-crud-ui/app/scripts/crud.saveable.js';\nimport Pageable from 'module-crud-ui/app/scripts/crud.pageable.js';\n/* global angular */\n\nexport default class MaterialDetailCtrl extends Saveable {\n\n  /*@ngInject*/\n  constructor( $state, translateService,$injector,$scope) {\n\n    super(\n      {\n        injector:$injector,\n        endpoint:'materials',\n        key:'materialId',\n        backToState:'searchResults'\n      }\n    );\n    this.state = $state;\n    this.translateService = translateService;\n    this.scope = $scope;\n    //TODO: Fix actions from card\n    this.actions = [\n      {\n        tooltip:translateService.translate('tooltip.search'),\n        action: () => { this.state.go('searchResults', this.state.params); },\n        icon: 'arrow-left'\n      }\n    ];\n    this.contextMenu = [\n      {\n        label: this.translateService.translate('med.materials.details.materialRatings'),\n        action: () => {\n          console.log(this.state.params);\n          this.state.go('materialDetailRatings', this.state.params, {reload: true});\n        }\n      }\n    ];\n    this.materialTitles = new Saveable({\n      injector: $injector,\n      endpoint: 'materialTitles',\n      backToState: \".\",\n      key: 'materialId',\n      params: {}\n    });\n\n    this.feeds = new Saveable({\n      injector: $injector,\n      endpoint: 'materialFeeds',\n      backToState: \".\",\n      key: 'materialId',\n      params: {}\n    });\n    this.networks = new Saveable({\n      injector: $injector,\n      endpoint: 'materialNetworks',\n      backToState: \".\",\n      key: 'materialId',\n      params: {}\n    });\n    this.chapters = new Pageable({\n      injector: $injector,  \n      endpoint: 'chapters',\n      backToState: \".\",\n      executeGet: false,\n      params: {materialId:this.$state.params.materialId},\n      selectable:\n      {\n        itemKey: 'id',\n        enabled:true,\n        params: {}\n      }\n    });\n    this.chapters.contextMenu  = [\n      {\n        label: this.translateService.translate('med.materials.details.chapterRatings'),\n        action: () => {\n          this.state.go('materialDetailChapterRatings', this.state.params, {reload: true});\n        }\n      }\n    ];\n    this.chapterTitles = new Saveable({\n      injector: $injector,\n      executeGet: false,\n      endpoint: 'chapterTitles',\n      backToState: \".\",\n      key: 'chapterId',\n      params: {materialId:this.params.materialId}\n    });\n    this._load();\n  }\n\n  _load(){\n    let self = this;\n    this.chapters.get().$promise.then((response)=>{\n      if(response.content.length > 0){\n\n        this._observe();\n      }\n    });\n  }\n\n  _observe(){\n    let self = this;\n    this.scope.$watch('vm.chapters.selectable.collection',\n      (newValue)=>{\n        if(newValue){\n          let chapterIndex = 0;\n          if(self.state.params.chapterId){\n            chapterIndex = this.findChapter(newValue);\n          }\n          self.selectChapter(newValue[chapterIndex]);\n        }\n      });\n  }\n\n  findChapter(collection){\n    let self = this;\n    let indx = collection.findIndex((it) => it.id == self.state.params.chapterId);\n    if(indx>-1){\n      return indx;\n    }\n    return 0;\n  }\n    \n  selectChapter(chapter){\n    chapter.selected = true;\n    this.chapters.selectable.change(chapter);\n    this.$state.params.chapterId = chapter.id;\n    this.$state.params.chapterspage = this.chapters.page.number;\n    this.$state.params.chaptersmax = this.chapters.page.size;\n    this.$state.params.materialId = this.entity.id;\n    this.state.go(this.state.current, this.state.params, {reload: false});\n    this.getChapterTitles();\n    this.selectedObj = chapter;\n  }\n\n  getChapterTitles(){\n    //this.$state.params.chapterId = chapterId;\n    this.chapterTitles.get();\n  }\n\n  getEpisodeElement(row){\n    return row.episode.elements == 'P' ? 'Episode' : 'Element';\n  }\n}\n"],"sourceRoot":"/source/"}