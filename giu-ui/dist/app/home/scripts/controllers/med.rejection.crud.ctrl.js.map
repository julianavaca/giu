{"version":3,"sources":["app/home/scripts/controllers/med.rejection.crud.ctrl.js"],"names":[],"mappings":"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","file":"app/home/scripts/controllers/med.rejection.crud.ctrl.js","sourcesContent":["'use strict';\n\nimport Saveable from 'module-crud-ui/app/scripts/crud.saveable.js';\n\nexport default class RejectionCrudCtrl extends Saveable {\n\n  /*@ngInject*/\n  constructor($injector, api, $state, $window, timeCalculatorService, segmentService,translateService) {\n\n    super(\n      {\n        injector: $injector,\n        endpoint: 'mediaRejections',\n        backToState: 'searchResults.detail',\n        key: '',\n        successTitle: 'generic.edit.alert.success.title',\n        successMessage: 'generic.edit.alert.success.message',\n        successCreateMessage: 'generic.edit.alert.create.success.message',\n        successEditMessage: 'generic.edit.alert.success.message',\n        errorTitle: 'generic.edit.alert.error',\n        params: {'id': $state.params.id},\n        entityDependencies: [\n          {api: 'technicalsState', loading: 'isLoadingTechnicalsState', model: 'etces'},\n          {api: 'rejectionTypes', loading: 'isLoadingRejectionTypes', model: 'types'}\n          //{api: 'technicalQualities', loading: 'isLoadingTechnicalQualities', model: 'qualities'},\n        ]\n      }\n    );\n    this.api = api;\n    this.state = $state;\n    this.window = $window;\n    this.timeCalculatorService = timeCalculatorService;\n    this.translateService=translateService;\n    this.segmentService = segmentService;\n    this.get();\n    this.translateService=translateService;\n    this.action=[{\n      tooltip: this.translateService.translate('tooltip.create'),\n      icon: 'plus',\n      action: () => {this.addEntryRow();},\n      show:{value:true}\n    }];\n  }\n\n  _initEdit(){\n    let self = this;\n    this.entity.items.forEach(function(rejection){\n      self.getQualities(rejection);\n    });\n  }\n\n  calculateLength(tcin, tcout, frame, obj,length) {\n    if (tcin !== undefined && tcout !== undefined) {\n      obj[length] = this.segmentService.framesToTimecode(this.segmentService.timecodeToFrame(tcout,frame) - this.segmentService.timecodeToFrame(tcin,frame),frame);\n    }\n  }\n\n  checkRanges(tcin, tcout, maxFrames, obj, validation) {\n    if (tcin !== undefined && tcout !== undefined) {\n      if (\n        this.segmentService.timecodeToFrame(tcin,maxFrames) < this.segmentService.timecodeToFrame(tcout,maxFrames)) {\n        obj[validation] = true;\n        return true;\n      } else {\n        obj[validation] = false;\n        return false;\n      }\n    }\n  }\n\n  findQuality(quality) {\n    quality.severity = this.qualities.find(function (elem) {\n      return elem.id == quality.id;\n    }).severity;\n  }\n\n  getQualities(rejection) {\n    let response;\n    if (rejection.quality.type !== undefined) {\n      response = this.api.technicalQualities.get({'typeId':rejection.quality.type.id});\n\n      response.$promise.then((response) => {\n        rejection.qualities = response.content;\n      }, (error) => {\n        this.isLoading = false;\n      });\n    }\n  }\n\n  timeSqueezeBind(rejection) {\n    rejection.tCIn = rejection.tCIn !== undefined ? this.segmentService.objectToString(rejection.tCIn) : undefined;\n    rejection.length = rejection.length !== undefined ? this.segmentService.objectToString(rejection.length) : undefined;\n    rejection.tCOut = rejection.tCOut !== undefined ? this.segmentService.objectToString(rejection.tCOut) : undefined;\n    rejection.isValidtCIntcOut = true;\n    rejection.isValidFrameIn = true;\n    rejection.isValidMin = true;\n    rejection.isValidtcOuttCIn = true;\n    rejection.isValidFrameOut = true;\n    rejection.isValidMax = true;\n  }\n\n  deleteEntry(entry) {\n    // Primero borramos el registro pedido\n    var index = this.entity.items.indexOf(entry);\n    if (index > -1) {\n      this.entity.items.splice(index, 1);\n    }\n    // Si es un audio, ajustamos los demas ids para ocupar el hueco del borrado\n    if (this.isAudioResource()) {\n      for (var i = 0; i < this.entity.items.length; i++) {\n        var currentId = this.entity.items[i].id;\n        if (currentId > entry.id) {\n          this.entity.items[i].id = currentId  - 1;\n        }\n      }\n    }\n  }\n\n  validateAndSave(form) {\n    // Validamos que todos los campos esten completos\n    for (var i = 0; i < this.entity.items.length; i++) {\n      var resource = this.entity.items[i];\n      if (!resource.quality.id || !resource.tCIn || !resource.tCOut || !resource.length || !resource.comments || !resource.isValidtCIntcOut || !resource.isValidFrameIn || !resource.isValidMin || !resource.isValidtcOuttCIn || !resource.isValidFrameOut || !resource.isValidMax) {\n        return false;\n      }\n    }\n    this.save(form);\n  }\n\n  save(form) {\n\n    //Si tiene error no hace el submit\n    if(form.$valid) {\n      let promise;\n\n      /* global angular */\n      var rejections = angular.copy(this.entity);\n      var segmentService = this.segmentService;\n\n      rejections.items.forEach(function(entry){\n        entry.tCIn = segmentService.stringToObject(entry.tCIn);\n        entry.tCOut = segmentService.stringToObject(entry.tCOut);\n        entry.length = segmentService.stringToObject(entry.length);\n        entry.isValidtCIntcOut = undefined;\n        entry.isValidFrameIn = undefined;\n        entry.isValidMin = undefined;\n        entry.isValidtcOuttCIn = undefined;\n        entry.isValidFrameOut = undefined;\n        entry.isValidMax = undefined;\n        entry.qualities = undefined;\n      });\n\n      if (this._isNew()) {//POST\n\n        //Al ser un POST no necesita construir todos los parametros de la url solo necesita los parametros\n        //si es un recurso anidado. En este caso estan en params\n        //ej: /media/:id/materilas - id esta en parmas\n        promise = this.api[this.endpoint].save(this.params, rejections).$promise;\n\n      } else { //PUT\n\n        //Al ser un PUT necesita como parametros el id de la entidad o los ids de todas las entidades de la url\n        //por eso se piden los pathParams. Lo arma la clase Able con colaboracion de addParams\n        //ej: /media/:id/materials/:materialId - _getPathParams() devuelve {id:xx, materialId:xx}\n        //es la union de la key y los params\n        promise = rejections.$update(this._getPathParams());\n      }\n      promise.then((response) => {\n        this.$log.info('then', response);\n\n        this.$log.info('back to state',this.backToState.state, this.backToState.params);\n\n        this.alertService.success(\n          {\n            title:this.translate(this.successTitle),\n            message:this._isNew() ? this.translate(this.successCreateMessage) : this.translate(this.successEditMessage)\n          }\n        );\n        this.$state.go(this.backToState.state, this.backToState.params);\n\n      }, (err) => {\n\n        if(err.status === 422){\n          err.data.forEach(data => {\n            form[data.field].$error = {backendError: true};\n            form[data.field].backenMessage = data.message;\n          });\n        } else {\n\n          this.alertService.error({\n            title: this.translate(this.errorTitle),\n            message: err.data.message\n\n          });\n        }\n\n      });\n\n      return promise;\n\n    } else {\n\n      this.$log.info('form invalid');\n\n      return undefined;\n    }\n  }\n\n  addEntryRow() {\n    if (!this.entity.isLoading && this.entity.items) {\n      var params = {};\n      this.entity.items.push(params);\n    }\n  }\n\n  areFramesValid(tCIn, frames, obj, validation) {\n    if (this.segmentService.areFramesValid(tCIn, frames)) {\n      obj[validation] = true;\n      return true;\n    } else {\n      obj[validation] = false;\n      return false;\n    }\n  }\n\n\n  goToBackState() {\n    this.window.history.back();\n  }\n\n  // Overraideamos el isNew porque nuestro id no será numérico como se espera por defecto\n  _isNew() {\n    return false;\n  }\n\n}\n\n\n"],"sourceRoot":"/source/"}