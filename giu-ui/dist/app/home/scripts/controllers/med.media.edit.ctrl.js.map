{"version":3,"sources":["app/home/scripts/controllers/med.media.edit.ctrl.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,oDAAoD,CAAC,gDAAgD,UAAU,SAAS;IAAxI;;IAGI,IAAI,UACa;IAAjB,OAAO;QACH,SAAS,CAAC,UAAU,uCAAuC;YACvD,WAAW,sCAAsC;;QAErD,SAAS,YAAY;;oFAJR,gBAAa,CAAA,UAAA,WAAA;gBAMlB,aAAa,SANR,eAAa;;;;gBAGnB,SAHM,cAGL,WAAW,KAAK,QAAQ;oBAQpB,aAAa,eAAe,MAX3B;;oBAKb,aAAA,IAAA,OAAA,eALa,cAAa,YAAA,eAAA,MAAA,KAAA,MAMtB;wBACI,UAAS;wBACT,UAAS;wBACT,aAAY;4BACV,OAAM,OAAO,OAAO,YAAY;4BAChC,QAAO,OAAO,OAAO,YAAY;;wBAEnC,KAAI;wBACJ,cAAc;wBACd,gBAAgB;wBAChB,sBAAsB;wBACtB,oBAAoB;wBACpB,YAAY;wBACZ,oBAAqB;;oBAI7B,KAAK,MAAM;oBACX,KAAK,QAAQ;oBACb,KAAK,cAAc,KAAK,cAAc,mBAAmB;oBACzD,KAAK,cAAc,KAAK,cAAc,kBAAkB,EAAE,aAAa,KAAK,MAAM,OAAO;;;gBAQjF,aAAa,YAlCR,eAAa,CAAA;oBAmCd,KAAK;oBACL,OANL,SAAA,cAAG;wBACV,KAAK,OAAO,QAAQ,EAAE,SAAS,IAAI,OAAO;;mBAQ/B;oBACC,KAAK;oBACL,OAPH,SAAA,cAAC,UAAU,QAAO;wBAQX,IAAI,QAAQ;;wBAP5B,KAAK,YAAY;wBACjB,KAAK,WAAW,KAAK,IAAI,UAAU,IAAI;;wBAEvC,KAAK,SAAS,SAAS,KAAK,YAAM;;4BAE9B,MAAK,YAAY;2BAElB,YAAA;4BASiB,OATX,MAAK,YAAY;;;wBAE1B,OAAO,KAAK;;mBAYD;oBACC,KAAK;oBACL,OAXH,SAAA,gBAAE;;wBAEb,KAAK,MAAM,OAAO,KAAK,KAAK,MAAM,OAAO;wBACzC,KAAK,OAAO,GAAG,KAAK,aAAa,KAAK,MAAM;;;;mBAe/B;oBACC,KAAK;oBACL,OAbV,SAAA,SAAG;wBACL,IAAI,KAAK,KAAK,OAAO,OAAO,KAAK;wBACjC,OAAO,CAAC;;;gBAgBA,OAxEK;eAAsB;;YA2E/B,QAAQ,WA3EC;;;GA8ElB","file":"app/home/scripts/controllers/med.media.edit.ctrl.js","sourcesContent":["'use strict';\n\nimport Saveable from 'module-crud-ui/app/scripts/crud.saveable.js';\n\nexport default class MediaEditCtrl extends Saveable {\n\n    /*@ngInject*/\n    constructor($injector, api, $state) {\n\n        super(\n            {\n                injector:$injector,\n                endpoint:'mediaMaterials',\n                backToState:{\n                  state:$state.params.backToState.state,\n                  params:$state.params.backToState.params\n                },\n                key:'id',\n                successTitle: 'media.edit.alert.success.title',\n                successMessage: 'media.edit.alert.success.message',\n                successCreateMessage: 'media.edit.alert.create.success.message',\n                successEditMessage: 'media.edit.alert.success.message',\n                errorTitle: 'media.edit.alert.error',\n                entityDependencies : [\n                ]\n            }\n        );\n        this.api = api;\n        this.state = $state;\n        this.networkData = this.getDetailData('networkResource', {});\n        this.mediaDetail = this.getDetailData('mediaMaterials', { 'detailCid': this.state.params.id });\n\n    }\n\n    _initCreate() {\n        this.entity.media = { network: {}, state: {} };\n    }\n\n    getDetailData(endpoint, params){\n        this.isLoading = true;\n        this.response = this.api[endpoint].get(params);\n\n        this.response.$promise.then(() => {\n\n            this.isLoading = false;\n\n        }, () => this.isLoading = false);\n\n        return this.response;\n    }\n\n    goToBackState(){\n      // Le pasamos a la pantalla anterior el id de media-material\n      this.state.params.id = this.state.params.mediaMaterialId;\n      this.$state.go(this.backToState, this.state.params);\n    }\n\n    // Overraideamos el isNew porque nuestro id no será numérico como se espera por defecto\n    _isNew() {\n        let id = this.$state.params[this.key];\n        return !id;\n    }\n\n}\n\n\n\n"],"sourceRoot":"/source/"}